;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{aget aclone alength amap array aset array? make-array into-array}, :name datascript.arrays, :imports nil, :requires {str clojure.string, clojure.string clojure.string}, :uses nil, :defs {if-cljs {:protocol-inline nil, :meta {:file "/home/akash/workspace/alias-manager/out/datascript/arrays.cljc", :line 8, :column 8, :end-line 8, :end-column 15, :private true, :arglists (quote ([env then else]))}, :private true, :name datascript.arrays/if-cljs, :variadic false, :file "out/datascript/arrays.cljc", :end-column 15, :method-params ([env then else]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 3, :fn-var true, :arglists (quote ([env then else]))}, make-array {:protocol-inline nil, :meta {:file "/home/akash/workspace/alias-manager/out/datascript/arrays.cljc", :line 11, :column 23, :end-line 11, :end-column 33, :tag array, :arglists (quote ([size]))}, :name datascript.arrays/make-array, :variadic false, :file "out/datascript/arrays.cljc", :end-column 33, :method-params ([size]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 11, :ret-tag array, :end-line 11, :max-fixed-arity 1, :tag array, :fn-var true, :arglists (quote ([size]))}, into-array {:protocol-inline nil, :meta {:file "/home/akash/workspace/alias-manager/out/datascript/arrays.cljc", :line 16, :column 23, :end-line 16, :end-column 33, :tag array, :arglists (quote ([aseq]))}, :name datascript.arrays/into-array, :variadic false, :file "out/datascript/arrays.cljc", :end-column 33, :method-params ([aseq]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 16, :ret-tag array, :end-line 16, :max-fixed-arity 1, :tag array, :fn-var true, :arglists (quote ([aseq]))}, aclone {:protocol-inline nil, :meta {:file "/home/akash/workspace/alias-manager/out/datascript/arrays.cljc", :line 64, :column 7, :end-line 64, :end-column 13, :arglists (quote ([from]))}, :name datascript.arrays/aclone, :variadic false, :file "out/datascript/arrays.cljc", :end-column 13, :method-params ([from]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([from]))}, aconcat {:protocol-inline nil, :meta {:file "/home/akash/workspace/alias-manager/out/datascript/arrays.cljc", :line 68, :column 7, :end-line 68, :end-column 14, :arglists (quote ([a b]))}, :name datascript.arrays/aconcat, :variadic false, :file "out/datascript/arrays.cljc", :end-column 14, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b]))}, amap {:protocol-inline nil, :meta {:file "/home/akash/workspace/alias-manager/out/datascript/arrays.cljc", :line 76, :column 7, :end-line 76, :end-column 11, :arglists (quote ([f arr]))}, :name datascript.arrays/amap, :variadic false, :file "out/datascript/arrays.cljc", :end-column 11, :method-params ([f arr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f arr]))}, asort {:protocol-inline nil, :meta {:file "/home/akash/workspace/alias-manager/out/datascript/arrays.cljc", :line 80, :column 7, :end-line 80, :end-column 12, :arglists (quote ([arr cmp]))}, :name datascript.arrays/asort, :variadic false, :file "out/datascript/arrays.cljc", :end-column 12, :method-params ([arr cmp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arr cmp]))}, array? {:protocol-inline nil, :meta {:file "/home/akash/workspace/alias-manager/out/datascript/arrays.cljc", :line 84, :column 25, :end-line 84, :end-column 31, :tag boolean, :arglists (quote ([x]))}, :name datascript.arrays/array?, :variadic false, :file "out/datascript/arrays.cljc", :end-column 31, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 10, :line 84, :ret-tag boolean, :end-line 84, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([x]))}}, :require-macros {datascript.arrays datascript.arrays}, :cljs.analyzer/constants {:seen #{:ns}, :order [:ns]}, :doc nil}